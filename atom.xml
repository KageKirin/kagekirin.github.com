<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Code Alchemist]]></title>
  <link href="http://kagekirin.github.com/atom.xml" rel="self"/>
  <link href="http://kagekirin.github.com/"/>
  <updated>2013-11-25T03:14:03+09:00</updated>
  <id>http://kagekirin.github.com/</id>
  <author>
    <name><![CDATA[Chris Helmich]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[1PPP - 1 Page Project Pitch]]></title>
    <link href="http://kagekirin.github.com/blog/2013/11/12/1ppp-1-page-project-pitch/"/>
    <updated>2013-11-12T10:54:00+09:00</updated>
    <id>http://kagekirin.github.com/blog/2013/11/12/1ppp-1-page-project-pitch</id>
    <content type="html"><![CDATA[<p>We were recently invited to write a small project pitch on our own.<br/>
I can&rsquo;t say if it was a genuine invitation to pitch new ideas
or just because management needed a follow up project,
but I kinda liked the idea.</p>

<p>Usually, a GDD (Game Design Document) fills up several pages,
or better: an internal project wiki;
while a full blown pitch takes at least 30 slides of media presentation
with a concept video, several concept artworks
and a presentation of the studio of the same size.
The pitches on Kickstarter give you an idea for what I mean.</p>

<p>Which is why a &ldquo;1 Page Project Pitch&rdquo;
&mdash; or &ldquo;1PPP&rdquo; to introduce the term &mdash;
seems like a good idea to publish a game idea,
however ripe this idea might be.</p>

<p>Let&rsquo;s lay out a few rules to allow the 1PPP
to be as precise and brief as possible.</p>

<h2>1PPP &mdash; the rules</h2>

<h3>Brievity: at most one A4 page</h3>

<p>A 1PPP should be short and not exceed a A4 page when printed out in a readable font.</p>

<h3>Precision: focus on defining the core idea</h3>

<p>A 1PPP should focus on describing the core game idea,
the game&rsquo;s core mechanics,
the game characters (if the characters play a rather major role in the game),
and optionally the game world and its inhabitants.</p>

<p>The latter points about characters, world etc. are prone to change anyway
between the idea pitch and the GDD creation,
so I wouldn&rsquo;t lose time detailing them more than needed to convey the idea.</p>

<h3>Ludistic Pitch: where&rsquo;s the fun?</h3>

<p>The maybe singlemost important point of the 1PPP:
where is the fun in the game?</p>

<p>Focus on describing how the game mechanics laid out above will end up being fun.
Also, lay out its genre (if it can be classified) to give a more precise idea.</p>

<h3>Financial Pitch: where&rsquo;s the money?</h3>

<p>The second important point of the 1PPP:
how is your game going to generate money?</p>

<p>Ok, I&rsquo;m sure, a lot of readers will now argue that games should be fun
and not worry about physically things like money,
but at the end of the day, the developers have a life as well and need to pay rent, feed their family, etc.
Plus, if you&rsquo;re pitching the idea to a publisher, this is a point he&rsquo;ll be most interested in.</p>

<p>Another point to cover if the minimum technical budget (engine licences, platform licences) you would see fit for the project.</p>

<h3>Artistic Pitch: what look for the game?</h3>

<p>Optional pitch #1: is there a specific look you want for the game?<br/>
Sometimes, a game idea rotates more about the general look-and-feel of game than the main mechanics.</p>

<p>Music and sound choices also go in here.</p>

<h3>Technical Pitch: anything technical goes here</h3>

<p>Optional pitch #2: is there any specific technique you want to use for the game?
This can cover everything from rendering, to special inputs, to code specifics.
And as all other ideas, this is prone to change.</p>

<h3>Story Pitch</h3>

<p>Optional pitch #3: everything story-related, from game world, its inhabitants, the main characters etc.
should be covered by this.
The ideas might change, but sometimes they lay out the particular atmosphere you want to pitch as game idea.</p>

<h3>Miscellanous Pitch</h3>

<p>Optional pitch #4: everything else. That&rsquo;s open to you.</p>

<h3>Realistic: stay down-to-earth</h3>

<p>Stay down-to-earth with the previous pitches.
It&rsquo;s good to expect money by making 10 million sales,
but unless you&rsquo;re Rockstar pitching the next GTA, you probably won&rsquo;t get that much sales anyway.</p>

<p>Also, for the financial pitch, try to come up with plausible values.</p>

<h3>References: keep them to a minimum</h3>

<p>Referencing other games is easy.
But a &ldquo;like Final Fantasy&rdquo; or &ldquo;like Pokemon&rdquo; is not enough to describe game mechanics,
even less to describe the core game mechanic.</p>

<p>Also, your readers will probably have a different approach, or perspective,
or just opinion,
about the games you&rsquo;re referencing,
so a comparison goes against the &ldquo;precision&rdquo; part explained above.</p>

<p>Plus, as opiniated as your reader may be, your readers might dislike the games you&rsquo;re referencing,
hence the comparison is a sure way to kill your pitch.</p>

<p>Comparisons can be helpful if you just scribble down your ideas on a note
to expand and iterate on them later. They should better not be part of the 1PPP.</p>

<p>Furthermore, too many references will make you look like a copy-cat from the start,
whereas describing the game mechanics, even if they are 100% similar to the title
you would be referencing, will not.</p>

<h3>Platform: what will the game run on?</h3>

<p>The part can be optional, but since the game mechanics might depend on it
(eg. touch controls for smartphone games VS joypad for console games VS mouse&amp;keyboard for PC games),
it&rsquo;s probably better to note them.</p>

<p>Control schemes aside, different platforms introduce different technical constraints,
which,
even if not addressed in the 1PPP,
should be covered later in the GDD.</p>

<p>Also, the platform part might decide the budget you can spend on the realization of the game.
(See financial pitch).</p>

<h2>tl;dr</h2>

<p>With these rules laid out, I&rsquo;ll be applying them to my own game ideas and publish them as 1PPP on this blog sometimes soon.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Starting with Unity]]></title>
    <link href="http://kagekirin.github.com/blog/2013/02/03/starting-with-unity/"/>
    <updated>2013-02-03T23:11:00+09:00</updated>
    <id>http://kagekirin.github.com/blog/2013/02/03/starting-with-unity</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git-Fusion - Distributed working with Perforce, the more awesome way]]></title>
    <link href="http://kagekirin.github.com/blog/2012/12/05/git-fusion-distributed-working-with-perforce/"/>
    <updated>2012-12-05T02:24:00+09:00</updated>
    <id>http://kagekirin.github.com/blog/2012/12/05/git-fusion-distributed-working-with-perforce</id>
    <content type="html"><![CDATA[<p>This one is even better than the P4Sandbox I previously wrote about:<br/>
Git-Fusion is a server bridge that interfaces Perforce to Git and allows
you to use the DVCS freely,
while still being able to work with a central server on enterprise level.</p>

<p>Git-Fusion is collection of Python scripts
that use P4Python
to interface with Perforce and Git on the server,
and take care of the <em>both-way</em> syncing
of the changes between P4 and Git.</p>

<p>It comes in 2 versions:
a &ldquo;virtual&rdquo; appliance that can be run anywhere as a VM,
and a &ldquo;native&rdquo; version that needs to be installed on a Linux machine.</p>

<p>Currently,
I&rsquo;m still stuck on the installation of the &ldquo;native&rdquo; version,
but I will post a tutorial once I&rsquo;m done with it.</p>

<p>Pros:<br/>
+   Git!<br/>
+   All the freedom that Git offers (syncing to multiple servers,
&ldquo;guerilla-style&rdquo; coding without central repo) while still be able to
submit to a central server for storage.<br/>
+   Other people that prefer Perforce (yes, they do exist) can still
continue to work with it.<br/>
+   the &ldquo;virtual&rdquo; version is super easy to get to install: 1 virtual
appliance disk image to run on a VM, access over HTTP, done.</p>

<p>Cons:<br/>
&ndash;    The &ldquo;native&rdquo; version is pretty hard to install (unless you&rsquo;re a
hardcore linux guy that knows how to administrate a system,
in which case you deserve all my respect for being able to cope
with the Perforce documentation)<br/>
&ndash;    Obviously, the limits of Git still apply. Using Git for large amounts
of large binaries is still a very bad idea. (But git was never intended
to be used this way)</p>

<p><em>tl;dr</em> Git-Fusion is pretty promising.
Check out the installation tutorial in near future.</p>

<p>/C</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[P4Sandbox - Distributed working with Perforce]]></title>
    <link href="http://kagekirin.github.com/blog/2012/12/05/p4sandbox-distributed-working-with-perforce/"/>
    <updated>2012-12-05T02:17:00+09:00</updated>
    <id>http://kagekirin.github.com/blog/2012/12/05/p4sandbox-distributed-working-with-perforce</id>
    <content type="html"><![CDATA[<p>Working with an P4 environment has its quirks,
such as not always being able to submit,
hence having unrelated changes accumulating in the same file.<br/>
In such cases, you can either submit the whole bunch,
hoping you didn&rsquo;t break anything on the way
and letting any poor integrator lost in the rain,
or spending even more time trying to untangle everything
in order to make small submits again
(good luck with this if you did NOT start out with making
many shelved changes on the way).</p>

<p>To remedy to this pain,
Perforce created the so called P4Sandbox,
which functions as a local
(single workspace)
replication server
to which you submit your changes to,
and later sync with the central server.
While working,
you can still get the latest updates from the central server
by syncing
(and resolving possible conflicts along the way).</p>

<p>Setting up a P4Sandbox is pretty easy,
since there&rsquo;s an assistant.
You will need to create a client mapping for the files you want to work on,
and get those replicated into the local copy.<br/>
From there,
you create another workspace,
this time using the P4Sandbox as server,
and start working.</p>

<p>Pros:<br/>
+   Distributed: Able to work even when the central server is not available.<br/>
+   Lockless: You can still submit even if the files are locked on the central server.<br/>
+   Locality: It&rsquo;s faster than using the central server.</p>

<p>Cons:<br/>
&ndash;   Disk space usage: 2 workspaces + the replicated data: the whole thing
will take quite some disk space. Of course, this works great if it&rsquo;s
only source files (or small image data), but once you have a lot of game
assets in it, be prepared to see your free disk space fade away quite
quickly.<br/>
&ndash;   Submit comments: comments done to changes in the P4Sandbox went lost
while syncing them with the central P4Server.<br/>
&ndash;   Shelves: shelving did not work when I used it. Might have been a bug,
though.</p>

<p>If you&rsquo;re like me and annoyed by the limits imposed on you by a central
P4 server, I can only urge to try it out for yourself.</p>

<p>/C</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Not dead yet...]]></title>
    <link href="http://kagekirin.github.com/blog/2012/12/05/not-dead-yet-dot-dot-dot/"/>
    <updated>2012-12-05T01:32:00+09:00</updated>
    <id>http://kagekirin.github.com/blog/2012/12/05/not-dead-yet-dot-dot-dot</id>
    <content type="html"><![CDATA[<p>This has been one crazy year.
Just a moment ago,
we were still in May,
then it was summer,
and now we&rsquo;re less than 3 weeks to Christmas.</p>

<p>I just wanted to affirm that neither me, nor my blog are dead yet.
I&rsquo;ve just been super busy IRL
and lacked the time
to write anything new.</p>

<p>I&rsquo;ll try to update more often, with smaller, but more concise posts.</p>

<p>/C</p>

<p>PS: Same for my other blog as well, btw.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My Work Environment (at work, 2012)]]></title>
    <link href="http://kagekirin.github.com/blog/2012/06/02/my-work-environment/"/>
    <updated>2012-06-02T19:07:00+09:00</updated>
    <id>http://kagekirin.github.com/blog/2012/06/02/my-work-environment</id>
    <content type="html"><![CDATA[<p>One of those posts, where I rant about my work environment.</p>

<p>At work, I&rsquo;m pretty much bound to a Windows environment,
since all the tools only work there.
So, I&rsquo;m running Windows7
(to which I got upgraded just recently, for the sake of my own sanity,
which was at stake for using Vista in 2012)
on a DELL Precision T3500 with AMD Radeon Graphics.<br/>
For the IDE, it&rsquo;s naturally Visual Studio,
namely Visual Studio 2008 Team System.
Per default, I had no version of <a href="http://www.wholetomato.com/">Visual Assist X</a>,
forcing me to buy my own license
(talking about &ldquo;tools of the trade&rdquo; when you can&rsquo;t have access to the swiss army knife of VS).<br/>
I also installed <a href="http://code.google.com/p/metalscroll/">MetalScroll</a>,
which makes finding references inside of one file pretty easy.<br/>
And <a href="http://www.xoreax.com/">IncrediBuild</a>,
which apparently costs way more in Japan,
due to some dirty tricks from the Isreali Embassy (the only provider of this product in Japan),
which tries to suck the lifeblood out of japanese software companies through their pricing.</p>

<p>For the source version control,
we&rsquo;re using <a href="http://www,perforce.com">Perforce</a>,
so I&rsquo;m stuck with their tools,
and despite there being a couple of welcome improvements in the latest versions,
i.e. streams,
I don&rsquo;t have access to them as the server is running in older version.
In fact, I often wish (at least 5 times a day) I could use <a href="http://www.git-scm.com">git</a> locally,
but the git-p4 bridges don&rsquo;t work that well.<br/>
(The hg-p4 bridge does work well, but I don&rsquo;t remember the way I set it up at my former employer).</p>

<p>For file editing related things (other than C++),
I&rsquo;m using <a href="http://notepadplusplus.sf.net">Notepad++</a>,
which, although not perfect,
doesn&rsquo;t give me headaches about usability issues.</p>

<p>I configured P4 to use P4merge for merging files,
since I like the 3 way-view with
&ldquo;theirs&rdquo;, &ldquo;base&rdquo; and &ldquo;ours&rdquo; on the top,
and &ldquo;merge result&rdquo; below.<br/>
For diffs, I&rsquo;m using a very handy tool called <a href="http://diffuse.sf.net">&ldquo;Diffuse&rdquo;</a>,
which allows for super fast diff&#8217;ing with only keyboard interaction.
(The only issue I&rsquo;m having with it is that it tends to break files with japanese encoding &mdash;
but then again, it&rsquo;s the comments that are in japanese,
and I just delete them since &ldquo;you shouldn&rsquo;t need to comment your code&rdquo; ;p ).</p>

<p>For other file related actions,
I&rsquo;m either using the vanilla explorer,
or <a href="http://www.ghisler.com">Total Commander</a>
(which is my preference when it comes to moving lots of files).</p>

<p><a href="http://www.physics.ucla.edu/~grosenth/jwpce.html">JWPce</a>
is my preference for writing Japanese,
as it includes a pretty neat dictionary,
and I&rsquo;m so used to this tool,
that I can hardly read Japanese without.<br/>
(Yeah, I&rsquo;m lazy and I know it).</p>

<p>For the other dev tools,
it&rsquo;s pretty classic,
XDK for working on Xbox360,
and SN Tools for working on PS3.</p>

<p>Oh yeah, one of the tools that come in handy is
<a href="https://www.virtualbox.org">Oracle&rsquo;s -Sun&rsquo;s- Virtual Machine VirtualBox</a>.
I have already a (several) Linux installation to automatize some backups
and I&rsquo;m running one from time to time to test software before installing it on my main system.
It&rsquo;s also pretty cool to track down hardware or driver issues that occur on the host system,
but should not be reproducible on the VM.<br/>
(Fun fact, the XDK tools tend to work better from within the VM than on the host system).</p>

<p>And that&rsquo;s pretty much it.<br/>
I&rsquo;m using some batch files to simplify a couple of workflows,
but nothing really extraordinary.</p>

<p>/C</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Generalized Motion Blur (cont'd)]]></title>
    <link href="http://kagekirin.github.com/blog/2012/05/31/generalized-motion-blur-contd/"/>
    <updated>2012-05-31T01:17:00+09:00</updated>
    <id>http://kagekirin.github.com/blog/2012/05/31/generalized-motion-blur-contd</id>
    <content type="html"><![CDATA[<p>I hope to cover some more aspects and enhancements of the
Generalized Motion Blur
I have not treated in my previous post.</p>

<p>As such there are:</p>

<ul>
<li>particle motion blur</li>
<li>generating other blur patterns through a different kind of particles</li>
<li>batching screen-space deformation to our scene buffer lookups.</li>
</ul>


<h2>Particle Motion blur</h2>

<p>Particles,
especially fast moving ones,
should get a motion blur as well
to improve realism.
This can be done in the same way
we did it for object motion blur (unskinned geometry),
namely by computing and writing out the
frame-based position difference,
but there are a few things to take care of.</p>

<h3>Alpha testing and translucence</h3>

<p>I did not cover this in the previous post,
but it pretty clear that alpha tested or alpha blended
geometry ideally requires the motion blur
to take the blending into account.<br/>
Practically, not taking it into account
might lead to a few artifacts,
but I doubt they would be that visible in the final result,
so we can ignore this part
and simply blend this motion vector
on top of the motion in the buffer.
(We can alter the motion length by some factor
to account translucency
and to make it less apparent).</p>

<h3>World transform matrices</h3>

<p>Depending on your architecture,
particles might get computed a bit differently
from normal objects.
While objects can be drawn one by one
using their world transform matrix,
this is likely to not being that optimal
when it comes to drawing thousands of particles.
In this, it is going to require
a little extra engineering effort
to buffer the last frame&rsquo;s particle positions
and to inject them into the drawing of this frame&rsquo;s ones
during the motion blur pass.</p>

<p>As this will double the drawcall cost,
it seems wiser to detect the particles that really
need motion blur,
and to just draw these.</p>

<h3>Geometry deformation</h3>

<p>I covered this method in my previous post,
stating that its result might be unpredictable.
This still holds true for complex geometry,
but in the case of particles,
the geometry ought not be too complex,
since most particles are just quads
rendered as billboards.</p>

<p>Since rendering motion blur
on top of already blurred particles
will look pretty bad,
such motion blur deformed particles should
rendered after the motion blur pass.
But there is another type of particles,
that could avoid us the work required to
either blur thousands of particles at once,
or to separate the particle passes into
motion-blur-deformed and normal ones.</p>

<h2>Motion blur particles</h2>

<p>(I did not find a better name despite intensive brainstorming, so beer with it).</p>

<p>The idea is to (slightly) abuse
the generalized motion blur method
by writing motion vectors
directly into the motion buffer.
This allows us to have a finer control
over what kind of motion vectors get written,
as they are based on a &ldquo;motion vector&rdquo; texture.<br/>
For example,
a motion texture can hold a unique direction
&mdash; the texture being then of one color with no grading &mdash;
and turn this vector to the &ldquo;right&rdquo; direction through rotation
to write a motion vector.</p>

<p>But since this texture based,
we can go one step further,
and use this method to generate
other blurs,
that are usually drawn in other passes.
Best example would a radial blur,
which is nothing more than a linear blur,
following centroid lines.</p>

<p>In fact, this is the point
where the generalized motion blur
can play its strength,
by allowing us to batch more
effects into one single pass.<br/>
The next section covers even more batching.</p>

<h2>Screen-space warping/refraction/deformation</h2>

<p>The main idea is
to batch particle based effects,
that produce a refractive-like visual,
like heat-haze or underwater &ldquo;wobbling&rdquo;,
into the motion blur pass.<br/>
Since the linear blur pass
mostly consists of texture fetches
from the scene buffer,
we can piggy-back on this
by &ldquo;jittering&rdquo; or &ldquo;warping&rdquo;,
thus deforming,
the screen-space texture coordinates.</p>

<p>To batch this into our existing framework,
we need to change the layout of the motion buffer a bit.
Since the &ldquo;warping&rdquo; is nothing more
than offsetting the screen-space coordinates,
it requires 2 channels to be effective.
Hence, the motion vector has to be reduced to 2 channels as well,
which can be achieved by projecting the motion vector
into screen-space first,
and then write its 2 values
into the 2 remaining channels.</p>

<p>Using a QWVU texture format
(Q8W8V8U8 or Q16W16V16U16,
but not A2W10V10U10 since we need the Q-channel as well),
the new buffer layout looks as follows:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[    U8V8     ][     W8Q8      ]
</span><span class='line'>[ssVelocity.xy][ssWarpOffset.xy]</span></code></pre></td></tr></table></div></figure>


<p>(I reversed the channel order for simplicity).</p>

<h3>Drawing offsets</h3>

<p>Just as with the motion vectors,
we can write the offset vectors
into the 2 channels of the motion buffer.
Writing needs to be additive as well,
to accumulate offset movements
from different layers
of particles,
so nothing really differs
from the motion (particle) passes,
but the target channels.
To avoid writing into the wrong channels,
one can set up write masks before the draw pass
(and reset them at the end).</p>

<p>Particles need to be Z-tested against the Z-buffer
to mask out foreground geometry,
and can profit from being smoothly depth-blended,
by modulating their strength
with respect to a factor
depending on the Z-buffer pixel depth
and the particle&rsquo;s.
But these conditions have to fulfilled
for the motion blur particles pass
as well.</p>

<p>To further optimize the particle passes,
it&rsquo;s possible to batch drawing
the motion blur particles
and the warp particles
at the same,
going as far as modifying the shader
to draw both values at once as needed.</p>

<p>So far for the second post on the
Generalized Motion Blur method.
We covered which particle passes
can be batched
and why drawing all particles again
to generate a motion vector field on them
might not be such a good idea.</p>

<p>In the next posts of the series,
We will cover the different aspects
of the actual linear blur pass,
and show even more effects
that can be batched into it.</p>

<p><strong>tl;dr</strong><br/>
Bad idea: Drawing thousands of particles twice to generate motion blur on them.<br/>
Good idea: Drawing special particles with motion vectors is more efficient.<br/>
Super idea: Batch screen-space warping particles into the motion particles.</p>

<p>/C</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Generalized Motion Blur (idea)]]></title>
    <link href="http://kagekirin.github.com/blog/2012/05/26/generalized-motion-blur-idea/"/>
    <updated>2012-05-26T14:03:00+09:00</updated>
    <id>http://kagekirin.github.com/blog/2012/05/26/generalized-motion-blur-idea</id>
    <content type="html"><![CDATA[<p>The are several existing techniques
to apply Motion Blur,
each with a slightly different purpose and outcome.</p>

<p>I will try to roughly classify those techniques
by showing the method behind,
and then propose a possible generalization
that allows to apply those different techniques to the same scene
in a computation economical way.</p>

<p>Ideally, rendering at high framerates (>60 fps)
would not require any motion blur,
as the human brain would create
the impression of blur
to compensate for the
eye&rsquo;s framerate of 24 fps.
Sadly, such an approach is
technically
&mdash; rendering a 60+ frames
on current gen consoles
is hardly possibly
or would require other limitations
in terms of rendering quality &mdash;
and artistically limited
&mdash; motion blur might be wanted
to express certain aesthetics &mdash;
hence not practical.</p>

<p>The main goal is
to apply several kinds
of motion blur
to a given scene
in a as little
drawcalls and fullscreen passes as possible,
and also
using a little framebuffers (memory consumption) as possible.</p>

<p>I will also write about
possible ways to further optimize
the processus.</p>

<h2>Types of Motion Blur</h2>

<h3>Nature of Motion Blur</h3>

<p>Before we begin,
let&rsquo;s define
the nature of a motion blur.</p>

<p>When we perceive
a motion to be blurred,
this is the effect of our eyes
not being able
to keep up with the movement,
hence it appearing doubled,
or blurred.</p>

<p>Similarly with a camera,
a motion blur is the result
of a movement velocity being higher
than shutter speed of the camera,
respectively,
higher than the CMOS capture speed.</p>

<h3>Last Frame Blended Motion Blur</h3>

<p>This motion blur processus consists
in blending the (n) last frame(s)
with the current frame,
which results in an
impression of afterimage.</p>

<p>In the old OpenGL versions,
it could be implemented using an Accumulation Buffer,
but on modern machines,
I would implement it
to use the last frame&rsquo;s final image
(i.e. blurred with frame (t-2)&rsquo;s final image)
as an input to blend with the current frame&rsquo;s final image.
This would result in a series of recursive blurs,
which might give a nice result.</p>

<p>On the downside, this would have me
store a fullres buffer of frame (t-1),
and possible fast camera movements
might yield very strange results,
such as strange afterimages instead of blurred lines.</p>

<h3>Object Deformation Motion Blur</h3>

<p>This motion blur procedure consists
in deforming moving objects
in the vertex shader
along their
frame interpolated movement vector.</p>

<p>It was used for example in the
<a href="http://developer.amd.com/archive/legacydemos/pages/ATIRadeon9700Real-TimeDemos.aspx">Radeon 9700 Animusic &ldquo;Pipe Dream&rdquo; demo from ATI</a>
to apply a motion blur on the balls.</p>

<p>The difficulty of the method lies
in the vertex shader
where we would need to transform
the vertices differently,
according to
their position relative to the center of the object
and the motion vector.
This works for simple objects where
the start and end of said object are easily defined
(e.g. spheres, as in the AMD demo),
but becomes more difficult
as the object&rsquo;s shape gets more complex.</p>

<p>(Although it could be done by
approximating each vertex to a unit sphere
around the center of the object
and distort vertices
from the lower hemisphere
with respect to the motion vector.
Something like this (untested):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>float3 posRadius = normalize(os_position);   //unit sphere radius vector for a given vertex in object space
</span><span class='line'>float hemisphere = sign(dot(posRadius, normalize(vMotion)));  //define which part of the sphere of the sphere we're on, w/r to the motion vector
</span><span class='line'>os_position += vMotion * saturate(-hemisphere);   //distort the vertex along the motion vector when on the lower hemisphere
</span><span class='line'>// continue vertex transform as usual</span></code></pre></td></tr></table></div></figure>


<p>The result of this is unpredictable on complex geometry, though,
and might lead to strangely deformed shapes).</p>

<p>On modern PC GPUs, this could be solved by issuing
more vertices to be drawn via a geometry shader.
Current gen console GPUs on the other don&rsquo;t
support geometry shader per se,
making this approach not practical
for cross-platform titles.</p>

<h3>Camera Motion Blur</h3>

<p>This blur is applicable as post-processing effect,
as it does not modify any geometry.
It consists of using the current and the previous frames&#8217;
view-projection matrices to reproject the Z-buffer
into world space, and to build a difference in position (the movement)
from the coordinates.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>float4x4 invViewProj_curr;
</span><span class='line'>float4x4 invViewProj_prev;
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>float zDepth = tex2D(depthBuffer, ssTC);
</span><span class='line'>float4 sscoords = float4x4(ssTC, zDepth, 1);
</span><span class='line'>
</span><span class='line'>float4 wpos_curr = mul(invViewProj_curr, sscoords);
</span><span class='line'>float4 wpos_prev = mul(invViewProj_prev, sscoords); 
</span><span class='line'>
</span><span class='line'>float4 wmov = wpos_curr - wpos_prev;</span></code></pre></td></tr></table></div></figure>


<p>We can then project the movement vector back to screen space
and use it to apply a linear blur on the scene texture.</p>

<p>Note: this method was presented by nVidia in the
<a href="http://http.developer.nvidia.com/GPUGems3/gpugems3_ch27.html">GPU Gems 3</a>.</p>

<h3>Object Motion Blur</h3>

<p>This blur method requires the blurred objects
to be drawn in another render pass,
which resulting buffer is used later
to apply a per-pixel linear blur.</p>

<p>For each object,
we pass its current and previous world matrices as input,
project the project into screen space,
and write the per-pixel movement
computed from transforming each of the objects vertices
by the current and previous world space matrices.</p>

<p>Most of the work can be done in the vertex shader,
and the position difference can be done in the pixel shader for accuracy.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>float4x4 World_curr;
</span><span class='line'>float4x4 World_prev;
</span><span class='line'>float4x4 ViewProj;
</span><span class='line'>
</span><span class='line'>struct VS_OUT
</span><span class='line'>{
</span><span class='line'>    float4 HPos : POSITION;
</span><span class='line'>    float4 wp_curr : TEXCOORD0;
</span><span class='line'>    float4 wp_prev : TEXCOORD1;
</span><span class='line'>};
</span><span class='line'>
</span><span class='line'>VS_OUT VS_main(float4 Position : POSITION)
</span><span class='line'>{
</span><span class='line'>    VS_OUT out = (VS_OUT)01;
</span><span class='line'>    
</span><span class='line'>    float4 w_curr = mul(World_curr, Position);
</span><span class='line'>    float4 w_prev = mul(World_prev, Position);
</span><span class='line'>    
</span><span class='line'>    out.HPos = mul(ViewProj, w_curr);
</span><span class='line'>    out.wp_curr = w_curr;
</span><span class='line'>    out.wp_prev = w_prev;
</span><span class='line'>    
</span><span class='line'>    return out;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>float4 PS_main(VS_OUT in) : COLOR0
</span><span class='line'>{
</span><span class='line'>    float4 Color = (float4)0;
</span><span class='line'>    
</span><span class='line'>    float4 wp_diff = in.wp_curr - in.wp_prev;
</span><span class='line'>    Color = wp_diff;
</span><span class='line'>    
</span><span class='line'>    return Color;
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<p>Then again, as for the Camera motion blur,
we use this movement vector
(projected into screen space)
as input to the linear blur.</p>

<h3>Animation Motion Blur</h3>

<p>This method is an extension
upon the object motion blur
for skinned objects
that takes the animation into account
to build the motion vector.</p>

<p>As such, the motion vector will be
the difference between
the world position of one vertex
using the current skin and world space matrices
and the world position of the same vertex
using the previous skin and world space matrices.</p>

<p>The algorithm differs
depending on how
the skinning is computed,
but given the case it&rsquo;s done on the GPU,
it will look like follows:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>float4x4 World_curr;
</span><span class='line'>float4x4 World_prev;
</span><span class='line'>float4x4 ViewProj;
</span><span class='line'>
</span><span class='line'>float4x4 skinning_matrices_curr[n];
</span><span class='line'>float4x4 skinning_matrices_prev[n];
</span><span class='line'>
</span><span class='line'>struct VS_OUT
</span><span class='line'>{
</span><span class='line'>    float4 HPos : POSITION;
</span><span class='line'>    float4 wp_curr : TEXCOORD0;
</span><span class='line'>    float4 wp_prev : TEXCOORD1;
</span><span class='line'>};
</span><span class='line'>
</span><span class='line'>VS_OUT VS_main(
</span><span class='line'>    float4 Position : POSITION,
</span><span class='line'>    float4 Weight : TEXOORD0,
</span><span class='line'>    int4 Indeces : TEXCOORD1
</span><span class='line'>)
</span><span class='line'>{
</span><span class='line'>    VS_OUT out = (VS_OUT)01;
</span><span class='line'>    
</span><span class='line'>    float4 skinnedPos_curr = computeSkinnedVertex(Position, Indeces, Weight, skinning_matrices_curr);
</span><span class='line'>    float4 skinnedPos_prev = computeSkinnedVertex(Position, Indeces, Weight, skinning_matrices_prev);    
</span><span class='line'>    
</span><span class='line'>    float4 w_curr = mul(World_curr, skinnedPos_curr);
</span><span class='line'>    float4 w_prev = mul(World_prev, skinnedPos_prev);
</span><span class='line'>    
</span><span class='line'>    out.HPos = mul(ViewProj, w_curr);
</span><span class='line'>    out.wp_curr = w_curr;
</span><span class='line'>    out.wp_prev = w_prev;
</span><span class='line'>    
</span><span class='line'>    return out;
</span><span class='line'>}
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p>The final movement vector
and linear blur computation
is the same as in the
Object motion blur.</p>

<h2>Generalization</h2>

<p>Since 3 (4 with some algorithmic changes) of these methods
consist of writing the motion vector
into a motion (or velocity) buffer,
and using this buffer as input to
a per-pixel linear blur,
generalizing the blurs seems straightforward.</p>

<p>We choose a texture format
that allows blending
and signed values.
On Xbox360, such a format would be the 32-bit
<code>D3DFMT_Q8W8V8U8</code>
or its 64-bit counterpart
<code>D3DFMT_Q16W16V16U16</code>.</p>

<p>Since the Xenon GPU does not allow floating-point textures
to be blended, it would be impractical to use such formats
and doing the blending after a readback of the previous draw pass,
as this would imply a lot of resolving and texture fetches.</p>

<p>Unsigned formats, on the other hand, make the
writing of negative values impossible,
hence they fall out of choice for screen or world space motion vectors.</p>

<p>As such, the generalized algorithm looks as follows:<br/>
1.  write the Z-Buffer reprojected Camera motion into the velocity buffer as an opaque blend to overwrite any existing value from the previous frame.<br/>
2.  write the Object motion with Z-testing against the previously used Z-buffer to avoid writing more than necessary. Blending should be additive.<br/>
3.  write the Skinned Object motion in the same way, blending additively.<br/>
4.  write some motion vectors (more on that in an ulterior post)
5.  resolve into a texture of possibly the same format as the render target surface.
6.  using this velocity texture, apply a per-pixel linear blur on the scene texture.</p>

<h2>More blurring&hellip;</h2>

<p>We can optimize and even batch more blurring into the motion blur pass,
but I will post more on it a later post.</p>

<p><strong>tl;dr</strong><br/>
There are several types of Motion blur passes,
and they can be batched for a more optimal render process.
More on blurring later.</p>

<p>/C</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Test-Driven Shader Development (an idea)]]></title>
    <link href="http://kagekirin.github.com/blog/2012/04/05/test-driven-shader-development-an-idea/"/>
    <updated>2012-04-05T00:57:00+09:00</updated>
    <id>http://kagekirin.github.com/blog/2012/04/05/test-driven-shader-development-an-idea</id>
    <content type="html"><![CDATA[<p>This post is more about an idea I had, than about its actual implementation.</p>

<p>Test-driven Shader Development</p>

<h2>Base idea</h2>

<p>When doing shader development,
be it for R&amp;D purposes or in a production environment,
you will run into a couple of possible issues:</p>

<ul>
<li>shader not compiling</li>
<li>shader not linking (in GL)</li>
<li>incompatible vertex and pixel shader due to interpolator differences (Cg, DX)</li>
<li>shader not running due to wrong input</li>
<li>shader running but not giving the expected result (algorithmic error)</li>
<li>shader not returning the expected result due to wrong input</li>
<li>wrong output from one shader breaking another shader (happens often when playing with lighting models)</li>
<li>shader computationally too heavy (instruction-bound or texture-fetch-bound)</li>
<li>a lot of other stuff that can go wrong, and by Murphy&rsquo;s law, will go wrong.</li>
</ul>


<p>In many of these cases,
nailing the problem down to a few causes,
at best a single one,
will allow for fast solutions
and let the programmer focus on the more interesting parts.</p>

<h2>Compiler/Driver issues</h2>

<p>Those are mostly issues related to building and loading the shader.</p>

<p>The straightforward solution is to implement hot reload,
i.e. reloading while the engine or test environment is running,
and this everytime the shader file is saved.</p>

<p>The apported benefit is that this will allow for shader cooking,
i.e. editing and tweaking of the shader depending on its &ldquo;visual&rdquo; result.<br/>
(One of the features I loved on CryENGINE3, and that I&rsquo;m totally missing on the current engine at work).</p>

<p>An optimization to this:<br/>
reload everytime a hash value depending on the full shader source,
i.e. the <code>main</code> function file and all of its includes, changes.</p>

<h2>Input issues</h2>

<p>The straightforward solution is to have &ldquo;static&rdquo; inputs.
Those can be:</p>

<ul>
<li>static textures to simulate a GBuffer</li>
<li>static camera values</li>
<li>static uniform settings</li>
<li>static vertex settings</li>
</ul>


<p>In the same idea, being able to tweak parameters and see its outcome is likely to help finding input values that lead to computational errors. (Div-by-zero anyone?).</p>

<h2>Output issues</h2>

<p>This kind of issues can be caught by creating a difference image to either</p>

<ul>
<li>a &ldquo;reference&rdquo; image (e.g. created through raytracing instead of rendering)</li>
<li>the last &ldquo;good&rdquo; result image</li>
</ul>


<p>The frame &ldquo;correctness&rdquo; is the amount of errors/differences in relation to the reference image.</p>

<h2>Algorithmic issues</h2>

<ul>
<li>using &ldquo;random&rdquo; inputs

<ul>
<li>shuffle inputs several times, test if output is correct</li>
</ul>
</li>
</ul>


<h2>Saving the tests</h2>

<p>A great addition for this kind of framework is to save the test &ldquo;artifacts&rdquo; (in Jenkins&#8217; terms) along with its inputs to allow for later reproducibility.</p>

<ul>
<li>inputs: the shader files, static input values, user input values</li>
<li>artifacts as such would be: random input values, output frames</li>
</ul>


<h2>Generalization</h2>

<p>Such a framework would be great to be generalized to work with both Direct3D (several versions, but at least DX9.5 for Xenon and DX11.1) and OpenGL (several versions as well, but ES2 would make my day).
And support for the exots like GX2 (&ldquo;Café&rdquo;) and GCM (PS3, Vita). (The shader in latter systems are based on GLSL and Cg, respectively, making the porting easier).</p>

<p>Furthermore, OpenCL and ComputeShaders would equally profit fropm such a system.
(As would SPU jobs do, but that&rsquo;s limited to a certain type of hardware).</p>

<p>A general solution would allow to have &ldquo;any&rdquo; kind of data
processed by &ldquo;any&rdquo; kind of &ldquo;processor&rdquo;, be it DX, GL, CL, CUDA or C++AMP.</p>

<p><strong> tl;dr</strong> Is there some student/grad student that would feel like implementing such a system as a master/diploma/doctorate thesis?</p>

<p>/C</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[More Mulberry]]></title>
    <link href="http://kagekirin.github.com/blog/2012/03/22/more-mulberry/"/>
    <updated>2012-03-22T01:25:00+09:00</updated>
    <id>http://kagekirin.github.com/blog/2012/03/22/more-mulberry</id>
    <content type="html"><![CDATA[<p>I found <a href="http://www.slideshare.net/rmurphey/getting-started-with-mulberry">this presentation about Mulberry</a> and wanted to share it.<br/>
It explains the core functionality of Mulberry.</p>

<p><strong>tl;dr</strong> Thinks to retain:</p>

<p><em>Routes</em> manage high-level application state.</p>

<p><em>Components</em> receive and render data and react to user input.</p>

<p><em>Capabilities</em> provide data to components and broker communications between them.</p>

<p><em>Page definitions</em> are reusable groupings of components and capabilities.</p>

<p><em>Stores</em> persist data on the device, make that data query-able, and return model instances.</p>

<p>/C</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mulberry Jam (cont'd)]]></title>
    <link href="http://kagekirin.github.com/blog/2012/03/14/mulberry-jam-contd/"/>
    <updated>2012-03-14T01:00:00+09:00</updated>
    <id>http://kagekirin.github.com/blog/2012/03/14/mulberry-jam-contd</id>
    <content type="html"><![CDATA[<p>Follow up on last week&rsquo;s post about Mulberry.</p>

<p>There have been a couple of changes with Xcode 4.3, iOS 5.1 and some updates in Mulberry that gave me a hard time&hellip;
In the end, I had to re-scaffold my test-apps from scratch and move my content over because of a few noteworthy changes.<br/>
Incidentally, those changes concern the parts I did not treat in detail in my last post (or just brushed over without investigating it into depth),
thus this follow-up makes a lot of sense.</p>

<p>Giving the demo-app &ldquo;kitchensink&rdquo; (located in <code>demos</code>) a closer look cleared a couple of questions I still had, so here I go:</p>

<h2>Customization</h2>

<h3>Page-defs</h3>

<p>A page-def defines the template for generated pages, i.e. the layout, components and capabilities to be used on a page.<br/>
Custom page-defs can be generated with the command below:</p>

<pre><code>mulberry create page_def &lt;name&gt;
</code></pre>

<p>which will create a file at <code>&lt;app-root&gt;/page_defs/&lt;name&gt;.yml</code>.<br/>
More info <a href="https://github.com/Toura/mulberry/wiki/Page-Definitions">here</a></p>

<p>All pre-existing page-defs lie in <code>&lt;mulberry-root&gt;/base_apps/toura/page_defs</code> and have their purpose written in their name, making it easy to guess what they may be intended for.<br/>
Here&rsquo;s a list of them, subject to changes as new versions arise:</p>

<pre><code>audio-with-images-phone.yml
audio-with-images-tablet.yml
debug.yml
default.yml
favorites.yml
feed-item.yml
feed-list-phone.yml
feed-list-tablet.yml
full-screen-images.yml
google-map-phone.yml
google-map-tablet.yml
grid-view.yml
home-phone.yml
home-tablet.yml
home-with-header-phone.yml
home-with-header-tablet.yml
hotspots.yml
images-and-text-phone.yml
images-and-text-tablet.yml
location-list.yml
node-gallery.yml
search.yml
videos-and-text-phone.yml
videos-and-text-tablet.yml
</code></pre>

<p>If you are creating your own page-defs for more than one project, it would probably make sense to put them inside this folder (and to commit them back to the Mulberry project in order to contribute to it).</p>

<p>A page-def defines which components will be visible for pages based on it. E.g.:</p>

<pre><code>home-with-header-phone:
  screens:
  - name: index
    backgroundImage: true
    regions:
    - className: header-image
      components:
      - PageHeaderImage

    - scrollable: true
      components:
      - BodyText
      - ChildNodes

    - className: nav
      components:
      - AppNav
</code></pre>

<h3>Components</h3>

<pre><code>mulberry create component &lt;name&gt;
</code></pre>

<p>which will create a Dojo UI component at <code>&lt;app-root&gt;/app/components/&lt;name&gt;.js</code> and <code>&lt;app-root&gt;/app/components/&lt;name&gt;/&lt;name&gt;.haml</code>).<br/>
See <a href="https://github.com/Toura/mulberry/wiki/Creating-Custom-Components">here</a> for more info.</p>

<h3>Capability</h3>

<p><strong>obsolete</strong></p>

<pre><code>mulberry create capability &lt;name&gt;
</code></pre>

<p>which will create a file at <code>&lt;app-root&gt;/javascript/capabilities/&lt;name&gt;.js</code>.<br/>
<a href="https://github.com/Toura/mulberry/wiki/Capabilities">More info</a></p>

<h3>Datasource</h3>

<pre><code>mulberry create datasource &lt;name&gt;
</code></pre>

<p>which will create a JSON file at <code>&lt;app-root&gt;/assets/data/&lt;name&gt;.json</code>. It can hold any data (as long as it&rsquo;s valid JSON) and it&rsquo;s up to the app to implement the functionality to read and use it.</p>

<h3>Feature flags</h3>

<p>See <a href="https://github.com/Toura/mulberry/wiki/Feature-Flags">here</a> for info on feature flags that determine whether a given feature is active or not.</p>

<h2>Xcode-side customization</h2>

<h3>App Icon, Splash Screen, and Project file</h3>

<p>When generating the app, the default PhoneGap app icon and splash screen, as well as the default Toura (xcodeproj) projects are copied into the app&rsquo;s <code>&lt;app-root&gt;/build</code> folder,
where they can be further customized. (Although I&rsquo;m not sure if re-generating the app overwrites the customized versions).</p>

<p>The source files are located at <code>&lt;mulberry-root&gt;/builder/project_templates/iOS/Toura</code> for the projects and further below in <code>&lt;mulberry-root&gt;/builder/project_templates/iOS/Toura/Resources/icons</code>
and <code>&lt;mulberry-root&gt;/builder/project_templates/iOS/Toura/Resources/splash</code> respectively for icons and splash screens.</p>

<p>It would be a nice extension to Mulberry if I could refer to my custom icons, loading screens, etc. in the config.yml and having those replace the default versions.</p>

<h3>Universal build</h3>

<p>At the moment, the iPhone and iPad have 2 separate projects (<code>Toura.xcodeproj</code> and <code>Toura-iPad.xcodeproj</code>).
But I guess, having a third <code>Toura-universal.xcodeproj</code> for universal apps might be another welcome extension.</p>

<h3>Automatic build</h3>

<p>Command line and Jenkins integration
<a href="http://nachbaur.com/blog/building-ios-apps-for-over-the-air-adhoc-distribution">This link</a> looks helpful.</p>

<p><strong>tl;dr</strong> I hope this short guide was useful to you.<br/>
I&rsquo;ve created a <a href="http://kagekirin.github.com/help/mulberry-cheat-sheet.html">help page</a> and although it&rsquo;s more a reminder for myself, you can use it as an easy overview.</p>

<p>Next up: Further Mulberry app customization &mdash; adapting style and layout.</p>

<p>/C</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[An outlook and some orientation]]></title>
    <link href="http://kagekirin.github.com/blog/2012/03/01/an-outlook-and-some-orientation/"/>
    <updated>2012-03-01T00:17:00+09:00</updated>
    <id>http://kagekirin.github.com/blog/2012/03/01/an-outlook-and-some-orientation</id>
    <content type="html"><![CDATA[<p>What will this blog be about?</p>

<p>I stated in my opening post that I will blog about graphics programming, programming on a general level, and add some tadbits about web programming. To concretize this plan, or rather as a TODO list, I wrote this post.</p>

<h2>Web programming</h2>

<ul>
<li>mostly about Octopress, how to, or better, how I customize parts of it.</li>
<li>some HTML5 and WebGL things I try out.</li>
<li>things that go hand in hand with the next topic</li>
</ul>


<h2>App programming</h2>

<ul>
<li>Using PhoneGap to create web technology-based iOS apps
&mdash;  automating parts of the build process</li>
<li>Using Mulberry to create web technology-based iOS apps</li>
<li>Other tools to create iOS apps</li>
</ul>


<h2>Graphics programming</h2>

<ul>
<li>Algorithms I implement either at work or at home</li>
<li>Explanations about graphics algorithms</li>
<li>Personal research</li>
</ul>


<h2>General programming</h2>

<ul>
<li>Refactoring</li>
<li>Optimization</li>
<li>Things I run into at work</li>
<li>The &ldquo;dark magic&rdquo; of language mixing
&mdash;  Preprocessor and templates
&mdash;  Obj-C and C++ templates (I see you gasping in horror at the sheer idea of this).
&mdash;  Preprocessor code generation</li>
</ul>


<h2>Game programming</h2>

<ul>
<li>Algorithms for game logic</li>
<li>Framework architecture</li>
<li>Other findings</li>
</ul>


<h2>Unity3D programming</h2>

<ul>
<li>C# in Unity</li>
<li>Learning progress</li>
<li>Shaders in Unity</li>
</ul>


<h2>Development tools</h2>

<ul>
<li>VisualStudio</li>
<li>Xcode</li>
<li>Perforce (mostly how much I despise this system)</li>
<li>Git</li>
<li>Mercurial</li>
<li>Diffing</li>
</ul>


<h2>Papers</h2>

<p>I might want to write (more or less academic) papers and submit them for review. You will find them here as well.</p>

<p>I will probably edit this list over time&hellip;</p>

<p><strong> tl;dr </strong><br/>
I have no clue what I will write about on this blog. But be sure that it&rsquo;ll be code-related.</p>

<p>/C</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Playing with Octopress -- Custom Asides]]></title>
    <link href="http://kagekirin.github.com/blog/2012/02/22/playing-with-octopress-custom-asides/"/>
    <updated>2012-02-22T01:31:00+09:00</updated>
    <id>http://kagekirin.github.com/blog/2012/02/22/playing-with-octopress-custom-asides</id>
    <content type="html"><![CDATA[<p>If you&rsquo;ve followed this blog, you might have noticed a couple of changes in the last days.
In fact, I&rsquo;ve been playing around with customizing Octopress and added a couple of custom asides.</p>

<h2>Coderwall</h2>

<p>I wanted to add my Coderwall badges in the asides. A bit of googling lead me to <a href="http://tzangms.com">another Octopress blog</a>, which was using <a href="http://mizzy.org/blog/2012/01/13/coderwall-badges-on-the-sidebar/">Mizzy</a>&rsquo;s code to display the badges. From there, it was pretty easy to extract the Javascript code from the page source. I only found the original author&rsquo;s page later today, but by then, I had already a working version.</p>

<p>As customization on the original code, I added the img@alt and img@title attributes to be generated from Coderwall&rsquo;s JSON response data. This gives a nice addition for hovering over the badge to get its description, and an alternative description for non-graphic browsers.</p>

<figure class='code'><figcaption><span> (coderwall.html)</span> <a href='http://kagekirin.github.com/downloads/code/../../_includes/asides/coderwall.html'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>{% if site.coderwall_user %}
</span><span class='line'><span class="nt">&lt;section&gt;</span>
</span><span class='line'>  <span class="nt">&lt;h1&gt;</span>Coderwall Badges<span class="nt">&lt;/h1&gt;</span>
</span><span class='line'>  <span class="nt">&lt;p&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="kd">function</span> <span class="nx">display_coderwall</span><span class="p">(</span><span class="nx">args</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">badges</span> <span class="o">=</span> <span class="nx">args</span><span class="p">[</span><span class="s2">&quot;data&quot;</span><span class="p">][</span><span class="s2">&quot;badges&quot;</span><span class="p">];</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">wall</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span> <span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">badges</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="kd">var</span> <span class="nx">alt_txt</span> <span class="o">=</span> <span class="nx">badges</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="s2">&quot;name&quot;</span><span class="p">];</span>
</span><span class='line'>          <span class="kd">var</span> <span class="nx">title_txt</span> <span class="o">=</span> <span class="nx">badges</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="s2">&quot;name&quot;</span><span class="p">]</span> <span class="o">+</span> <span class="s1">&#39; - &#39;</span> <span class="o">+</span> <span class="nx">badges</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="s2">&quot;description&quot;</span><span class="p">];</span>
</span><span class='line'>          <span class="nx">wall</span> <span class="o">+=</span> <span class="s1">&#39;&lt;a href=&quot;http://coderwall.com/{{site.coderwall_user}}/&quot;&gt;&lt;img src=&quot;&#39;</span>
</span><span class='line'>            <span class="o">+</span> <span class="nx">badges</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="s2">&quot;badge&quot;</span><span class="p">]</span>
</span><span class='line'>            <span class="o">+</span> <span class="s1">&#39;&quot; width=&quot;48&quot; height=&quot;48&quot; alt=&quot;&#39;</span> <span class="o">+</span> <span class="nx">alt_txt</span>
</span><span class='line'>            <span class="o">+</span> <span class="s1">&#39;&quot; title=&quot;&#39;</span> <span class="o">+</span> <span class="nx">title_txt</span>
</span><span class='line'>            <span class="o">+</span> <span class="s1">&#39;&quot;/&gt;&lt;/a&gt;&#39;</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="nb">document</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="nx">wall</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="nt">&lt;/script&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;http://coderwall.com/{{site.coderwall_user}}.json?callback=display_coderwall&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/p&gt;</span>
</span><span class='line'>  {% if site.coderwall_show_endorse_link %}
</span><span class='line'>  <span class="nt">&lt;p&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;http://coderwall.com/{{site.coderwall_user}}&quot;</span><span class="nt">&gt;&lt;img</span> <span class="na">src=</span><span class="s">&quot;http://api.coderwall.com/{{site.coderwall_user}}/endorsecount.png&quot;</span> <span class="nt">/&gt;&lt;/a&gt;&lt;/p&gt;</span>
</span><span class='line'>  {% endif %}
</span><span class='line'><span class="nt">&lt;/section&gt;</span>
</span><span class='line'>{% endif %}
</span></code></pre></td></tr></table></div></figure>


<h2>Xbox Live</h2>

<p>The second custom aside I created follows the implementation as described on the official Xbox site, which is using an iframe to embed the card. I don&rsquo;t really like the iframe to embed an external page, but this implementation was small and function, which is the essential.</p>

<figure class='code'><figcaption><span> (xboxlive.html)</span> <a href='http://kagekirin.github.com/downloads/code/../../_includes/asides/xboxlive.html'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>{% if site.xboxlive_user %}
</span><span class='line'><span class="nt">&lt;section&gt;</span>
</span><span class='line'>  <span class="nt">&lt;h1&gt;</span>Xbox Live<span class="nt">&lt;/h1&gt;</span>
</span><span class='line'>  <span class="nt">&lt;iframe</span> <span class="na">src=</span><span class="s">&quot;http://gamercard.xbox.com/{{site.xboxlive_user}}.card&quot;</span> <span class="na">scrolling=</span><span class="s">&quot;no&quot;</span> <span class="na">frameBorder=</span><span class="s">&quot;0&quot;</span> <span class="na">height=</span><span class="s">&quot;140&quot;</span> <span class="na">width=</span><span class="s">&quot;204&quot;</span><span class="nt">&gt;</span>{{site.xboxlive_user}}<span class="nt">&lt;/iframe&gt;</span>
</span><span class='line'><span class="nt">&lt;/section&gt;</span>
</span><span class='line'>{% endif %}
</span></code></pre></td></tr></table></div></figure>


<h2>Configuration</h2>

<p>The coderwall_user and xboxlive_user need to be specified in _config.yml.</p>

<h2>More gamercard services</h2>

<p>Given you have a website that generates nice gamercards (there are ton of thems), you can use the above code to include your custom gamercard as an aside.</p>

<p><strong> tl;dr </strong>
Creating asides is super easy with Jekyll/Octopress. And I&rsquo;ll probably create a few more for fun.</p>

<p>/C</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rediscovering Web Development in 2012]]></title>
    <link href="http://kagekirin.github.com/blog/2012/02/19/rediscovering-web-development-2012/"/>
    <updated>2012-02-19T22:49:00+09:00</updated>
    <id>http://kagekirin.github.com/blog/2012/02/19/rediscovering-web-development-2012</id>
    <content type="html"><![CDATA[<p>I&rsquo;m not a web developer by birth.
I&rsquo;ve done some web development as cheap jobs when I was a student. As such, I knew the vital parts of PHP, some bits of Javascript and of course the HTML4 DOM and the basics of CSS. Just enough to pound out a (-cheap-looking- programmer art) webpage, with MySQL for database support.
That was between 1999 and 2006. Then I graduated.</p>

<p>Not that web development was boring, but since the web bubble just exploded when I was in my 2nd year at University, I had some prejudices to web development being a good career path. Plus, game programming was something I wanted to do since my childhood, and graphics programming was something I studied, I chose the path of a graphics programmer, and not the one of a web developper.</p>

<p>Hence, I didn&rsquo;t follow the evolutions that closely.
Well, I saw XHTML coming during the XML boom &mdash; put everything into XML, and if you need the data in a different format, add some XML layer on top of it &mdash; and going, I saw HTML5 arriving to make the web better (and played Apple&rsquo;s &ldquo;Checkers&rdquo; demo countless of times), saw the rise of CSS, to the point of CSS3 (I liked the part where it killed the old tablosaurs), and WebGL arriving (after seeing VRML and X3D dying their all-to-merited death), all that without really taking part in those changes.</p>

<p>And now, in 2012, I finally decided to relaunch my blog in a different form (I had a self-hosted WordPress blog, but I let it die without updates, neither in the form of WP patches, nor in content) and found this Octopress thingy I am using, which looks to me that it&rsquo;s using a great bunch of new technologies, that didn&rsquo;t ring any bells until now: SASS, Liquid, Jekyll, jQuery, etc.</p>

<p>So I&rsquo;m entering totally new terrain, which is both terrifying (in the amount of new stuff to learn) and interesting (in the amount of new stuff to discover) at the same time, and I&rsquo;ll be blogging about my discoverings here from time to time.</p>

<p>Besides trying to configure this site to look a bit &ldquo;different&rdquo; from the vanilla Octopress theme, I have one other motivation to go all this way:
I was asked by some very good friends if I could produce some small iOS app for their organization. Hence I&rsquo;ve been spending some time to look into possible solutions to produce an app (possibly not limited to iOS) in the short amount of time I have besides work.</p>

<p>I already knew PhoneGap from some earlier &ldquo;research&rdquo;, but haven&rsquo;t come to use it yet.
But then I found Octopress, and Jekyll as a static page generator as its base, and this idea kinda stuck with me: If I&rsquo;m going to put out a little app that&rsquo;s going to contain little more than text, I could use those technologies to pound out an app pretty quickly. Modifying the styles could even be done by my friends, and since I could easily host its sources on github, it would make the updates pretty easy.</p>

<p>Looking closer at my requirements, I found out that there&rsquo;s already been someone with a similar idea, which has resulted in a project called Mulberry.</p>

<p>Mulberry is based on PhoneGap and Jekyll and allows to generate the &ldquo;scaffolding&rdquo; of an app for iOS and Android. I&rsquo;ve been toying with for a couplke of hours today, but it looks pretty promising.</p>

<p><strong>tl;dr</strong> Web development has gone a long way, and I&rsquo;m looking forward to learn more about all these new technologies.
Actually, it&rsquo;s awesome to see all the new evolutions of web technologies, and even to be using them.</p>

<p>On this matter of thought, if anyone knows how to put in a WebGL-powered tag cloud for the categories of my posts, I&rsquo;d like to hear about it.</p>

<p>/C</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Opening Post]]></title>
    <link href="http://kagekirin.github.com/blog/2012/02/15/opening-post/"/>
    <updated>2012-02-15T23:32:00+09:00</updated>
    <id>http://kagekirin.github.com/blog/2012/02/15/opening-post</id>
    <content type="html"><![CDATA[<p><strong>tl;dr</strong> I hereby declare this blog opened!</p>

<p>Since my old WP blog died of (wilfull) neglect at least 2 years ago, I am starting a new one, and will try to keep it updated regularly. (I don&rsquo;t promise anything, though).
My old blog was a more a mixture of political stuff, life blog, and coding, and also written in several languages, meaning that each post was a lot of extra work translating it.
This time, I&rsquo;ll keep it easy and blog only about coding stuff, and only in English.</p>

<p>What coding stuff? (There&rsquo;s a lot that would merit to be talked about).<br/>
Since I&rsquo;m a graphics programmer, there will be posts about graphics programming, i.e. shaders, graphics algorithms.<br/>
But I will also cover more general programming, be it with subjects like refactoring,
&ldquo;dark magic&rdquo; programming (the arcanes of mixing languages that should better not be mixed &mdash; more on that later), programming languages, etc.<br/>
Also, I plan to write about my learning of C# with Unity3D.<br/>
And since I&rsquo;m currently rediscovering a lot of web programming that I just saw passing by in the last years, I will write about that as well.</p>

<p>So far, for what I plan to blog about, but I will write a more specific post with some ideas later.</p>

<p>/C</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello World]]></title>
    <link href="http://kagekirin.github.com/blog/2012/02/15/hello-world/"/>
    <updated>2012-02-15T23:31:00+09:00</updated>
    <id>http://kagekirin.github.com/blog/2012/02/15/hello-world</id>
    <content type="html"><![CDATA[<p>Like the first words an infant says, a coder starts his &ldquo;coder life&rdquo; by printing those simple words.</p>

<p>More in detail, the point of creating a program that prints a little message is to prove that the programming statements are understood by the parser, can be translated into an abstract syntax, and finally translated into binary instructions understandable by the machine. In short, if this simple program can be compiled and linked, any other program can be built as well.</p>

<p>As such, there&rsquo;s nothing more appropriate as to start this dev blog by stating &ldquo;Hello World&rdquo;.
I.e. if this post can be generated, any post can be generated.</p>

<p><strong>tl;dr</strong>
This looks nicer than a generic lorem ipsum.</p>

<p>/C</p>
]]></content>
  </entry>
  
</feed>
